// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/opctl/opctl/cli/internal/nodeprovider"
	"github.com/opctl/opctl/sdks/go/node"
)

type FakeNodeProvider struct {
	StartNodeStub        func(context.Context) (node.Node, error)
	startNodeMutex       sync.RWMutex
	startNodeArgsForCall []struct {
		arg1 context.Context
	}
	startNodeReturns struct {
		result1 node.Node
		result2 error
	}
	startNodeReturnsOnCall map[int]struct {
		result1 node.Node
		result2 error
	}
	StopNodeIfExistsStub        func(string) error
	stopNodeIfExistsMutex       sync.RWMutex
	stopNodeIfExistsArgsForCall []struct {
		arg1 string
	}
	stopNodeIfExistsReturns struct {
		result1 error
	}
	stopNodeIfExistsReturnsOnCall map[int]struct {
		result1 error
	}
	ListNodesStub        func() ([]node.Node, error)
	listNodesMutex       sync.RWMutex
	listNodesArgsForCall []struct {
	}
	listNodesReturns struct {
		result1 []node.Node
		result2 error
	}
	listNodesReturnsOnCall map[int]struct {
		result1 []node.Node
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeProvider) StartNode(arg1 context.Context) (node.Node, error) {
	fake.startNodeMutex.Lock()
	ret, specificReturn := fake.startNodeReturnsOnCall[len(fake.startNodeArgsForCall)]
	fake.startNodeArgsForCall = append(fake.startNodeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("StartNode", []interface{}{arg1})
	fake.startNodeMutex.Unlock()
	if fake.StartNodeStub != nil {
		return fake.StartNodeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startNodeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNodeProvider) StartNodeCallCount() int {
	fake.startNodeMutex.RLock()
	defer fake.startNodeMutex.RUnlock()
	return len(fake.startNodeArgsForCall)
}

func (fake *FakeNodeProvider) StartNodeCalls(stub func(context.Context) (node.Node, error)) {
	fake.startNodeMutex.Lock()
	defer fake.startNodeMutex.Unlock()
	fake.StartNodeStub = stub
}

func (fake *FakeNodeProvider) StartNodeArgsForCall(i int) context.Context {
	fake.startNodeMutex.RLock()
	defer fake.startNodeMutex.RUnlock()
	argsForCall := fake.startNodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeProvider) StartNodeReturns(result1 node.Node, result2 error) {
	fake.startNodeMutex.Lock()
	defer fake.startNodeMutex.Unlock()
	fake.StartNodeStub = nil
	fake.startNodeReturns = struct {
		result1 node.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeProvider) StartNodeReturnsOnCall(i int, result1 node.Node, result2 error) {
	fake.startNodeMutex.Lock()
	defer fake.startNodeMutex.Unlock()
	fake.StartNodeStub = nil
	if fake.startNodeReturnsOnCall == nil {
		fake.startNodeReturnsOnCall = make(map[int]struct {
			result1 node.Node
			result2 error
		})
	}
	fake.startNodeReturnsOnCall[i] = struct {
		result1 node.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeProvider) StopNodeIfExists(arg1 string) error {
	fake.stopNodeIfExistsMutex.Lock()
	ret, specificReturn := fake.stopNodeIfExistsReturnsOnCall[len(fake.stopNodeIfExistsArgsForCall)]
	fake.stopNodeIfExistsArgsForCall = append(fake.stopNodeIfExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StopNodeIfExists", []interface{}{arg1})
	fake.stopNodeIfExistsMutex.Unlock()
	if fake.StopNodeIfExistsStub != nil {
		return fake.StopNodeIfExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.stopNodeIfExistsReturns
	return fakeReturns.result1
}

func (fake *FakeNodeProvider) StopNodeIfExistsCallCount() int {
	fake.stopNodeIfExistsMutex.RLock()
	defer fake.stopNodeIfExistsMutex.RUnlock()
	return len(fake.stopNodeIfExistsArgsForCall)
}

func (fake *FakeNodeProvider) StopNodeIfExistsCalls(stub func(string) error) {
	fake.stopNodeIfExistsMutex.Lock()
	defer fake.stopNodeIfExistsMutex.Unlock()
	fake.StopNodeIfExistsStub = stub
}

func (fake *FakeNodeProvider) StopNodeIfExistsArgsForCall(i int) string {
	fake.stopNodeIfExistsMutex.RLock()
	defer fake.stopNodeIfExistsMutex.RUnlock()
	argsForCall := fake.stopNodeIfExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeProvider) StopNodeIfExistsReturns(result1 error) {
	fake.stopNodeIfExistsMutex.Lock()
	defer fake.stopNodeIfExistsMutex.Unlock()
	fake.StopNodeIfExistsStub = nil
	fake.stopNodeIfExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeProvider) StopNodeIfExistsReturnsOnCall(i int, result1 error) {
	fake.stopNodeIfExistsMutex.Lock()
	defer fake.stopNodeIfExistsMutex.Unlock()
	fake.StopNodeIfExistsStub = nil
	if fake.stopNodeIfExistsReturnsOnCall == nil {
		fake.stopNodeIfExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopNodeIfExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeProvider) ListNodes() ([]node.Node, error) {
	fake.listNodesMutex.Lock()
	ret, specificReturn := fake.listNodesReturnsOnCall[len(fake.listNodesArgsForCall)]
	fake.listNodesArgsForCall = append(fake.listNodesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListNodes", []interface{}{})
	fake.listNodesMutex.Unlock()
	if fake.ListNodesStub != nil {
		return fake.ListNodesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listNodesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNodeProvider) ListNodesCallCount() int {
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	return len(fake.listNodesArgsForCall)
}

func (fake *FakeNodeProvider) ListNodesCalls(stub func() ([]node.Node, error)) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = stub
}

func (fake *FakeNodeProvider) ListNodesReturns(result1 []node.Node, result2 error) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = nil
	fake.listNodesReturns = struct {
		result1 []node.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeProvider) ListNodesReturnsOnCall(i int, result1 []node.Node, result2 error) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = nil
	if fake.listNodesReturnsOnCall == nil {
		fake.listNodesReturnsOnCall = make(map[int]struct {
			result1 []node.Node
			result2 error
		})
	}
	fake.listNodesReturnsOnCall[i] = struct {
		result1 []node.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startNodeMutex.RLock()
	defer fake.startNodeMutex.RUnlock()
	fake.stopNodeIfExistsMutex.RLock()
	defer fake.stopNodeIfExistsMutex.RUnlock()
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nodeprovider.NodeProvider = new(FakeNodeProvider)
