// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"io"
	"sync"
)

type FakeContainerLogStreamer struct {
	StreamStub        func(context.Context, string, io.Writer) error
	streamMutex       sync.RWMutex
	streamArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 io.Writer
	}
	streamReturns struct {
		result1 error
	}
	streamReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerLogStreamer) Stream(arg1 context.Context, arg2 string, arg3 io.Writer) error {
	fake.streamMutex.Lock()
	ret, specificReturn := fake.streamReturnsOnCall[len(fake.streamArgsForCall)]
	fake.streamArgsForCall = append(fake.streamArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 io.Writer
	}{arg1, arg2, arg3})
	fake.recordInvocation("Stream", []interface{}{arg1, arg2, arg3})
	fake.streamMutex.Unlock()
	if fake.StreamStub != nil {
		return fake.StreamStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.streamReturns
	return fakeReturns.result1
}

func (fake *FakeContainerLogStreamer) StreamCallCount() int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return len(fake.streamArgsForCall)
}

func (fake *FakeContainerLogStreamer) StreamCalls(stub func(context.Context, string, io.Writer) error) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = stub
}

func (fake *FakeContainerLogStreamer) StreamArgsForCall(i int) (context.Context, string, io.Writer) {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	argsForCall := fake.streamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeContainerLogStreamer) StreamReturns(result1 error) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = nil
	fake.streamReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerLogStreamer) StreamReturnsOnCall(i int, result1 error) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = nil
	if fake.streamReturnsOnCall == nil {
		fake.streamReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.streamReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerLogStreamer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerLogStreamer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
