// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/opctl/opctl/sdks/go/model"
)

type FakeDataHandle struct {
	GetContentStub        func(context.Context, string) (model.ReadSeekCloser, error)
	getContentMutex       sync.RWMutex
	getContentArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getContentReturns struct {
		result1 model.ReadSeekCloser
		result2 error
	}
	getContentReturnsOnCall map[int]struct {
		result1 model.ReadSeekCloser
		result2 error
	}
	ListDescendantsStub        func(context.Context) ([]*model.DirEntry, error)
	listDescendantsMutex       sync.RWMutex
	listDescendantsArgsForCall []struct {
		arg1 context.Context
	}
	listDescendantsReturns struct {
		result1 []*model.DirEntry
		result2 error
	}
	listDescendantsReturnsOnCall map[int]struct {
		result1 []*model.DirEntry
		result2 error
	}
	RefStub        func() string
	refMutex       sync.RWMutex
	refArgsForCall []struct {
	}
	refReturns struct {
		result1 string
	}
	refReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDataHandle) GetContent(arg1 context.Context, arg2 string) (model.ReadSeekCloser, error) {
	fake.getContentMutex.Lock()
	ret, specificReturn := fake.getContentReturnsOnCall[len(fake.getContentArgsForCall)]
	fake.getContentArgsForCall = append(fake.getContentArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetContent", []interface{}{arg1, arg2})
	fake.getContentMutex.Unlock()
	if fake.GetContentStub != nil {
		return fake.GetContentStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getContentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDataHandle) GetContentCallCount() int {
	fake.getContentMutex.RLock()
	defer fake.getContentMutex.RUnlock()
	return len(fake.getContentArgsForCall)
}

func (fake *FakeDataHandle) GetContentCalls(stub func(context.Context, string) (model.ReadSeekCloser, error)) {
	fake.getContentMutex.Lock()
	defer fake.getContentMutex.Unlock()
	fake.GetContentStub = stub
}

func (fake *FakeDataHandle) GetContentArgsForCall(i int) (context.Context, string) {
	fake.getContentMutex.RLock()
	defer fake.getContentMutex.RUnlock()
	argsForCall := fake.getContentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDataHandle) GetContentReturns(result1 model.ReadSeekCloser, result2 error) {
	fake.getContentMutex.Lock()
	defer fake.getContentMutex.Unlock()
	fake.GetContentStub = nil
	fake.getContentReturns = struct {
		result1 model.ReadSeekCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeDataHandle) GetContentReturnsOnCall(i int, result1 model.ReadSeekCloser, result2 error) {
	fake.getContentMutex.Lock()
	defer fake.getContentMutex.Unlock()
	fake.GetContentStub = nil
	if fake.getContentReturnsOnCall == nil {
		fake.getContentReturnsOnCall = make(map[int]struct {
			result1 model.ReadSeekCloser
			result2 error
		})
	}
	fake.getContentReturnsOnCall[i] = struct {
		result1 model.ReadSeekCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeDataHandle) ListDescendants(arg1 context.Context) ([]*model.DirEntry, error) {
	fake.listDescendantsMutex.Lock()
	ret, specificReturn := fake.listDescendantsReturnsOnCall[len(fake.listDescendantsArgsForCall)]
	fake.listDescendantsArgsForCall = append(fake.listDescendantsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("ListDescendants", []interface{}{arg1})
	fake.listDescendantsMutex.Unlock()
	if fake.ListDescendantsStub != nil {
		return fake.ListDescendantsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDescendantsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDataHandle) ListDescendantsCallCount() int {
	fake.listDescendantsMutex.RLock()
	defer fake.listDescendantsMutex.RUnlock()
	return len(fake.listDescendantsArgsForCall)
}

func (fake *FakeDataHandle) ListDescendantsCalls(stub func(context.Context) ([]*model.DirEntry, error)) {
	fake.listDescendantsMutex.Lock()
	defer fake.listDescendantsMutex.Unlock()
	fake.ListDescendantsStub = stub
}

func (fake *FakeDataHandle) ListDescendantsArgsForCall(i int) context.Context {
	fake.listDescendantsMutex.RLock()
	defer fake.listDescendantsMutex.RUnlock()
	argsForCall := fake.listDescendantsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataHandle) ListDescendantsReturns(result1 []*model.DirEntry, result2 error) {
	fake.listDescendantsMutex.Lock()
	defer fake.listDescendantsMutex.Unlock()
	fake.ListDescendantsStub = nil
	fake.listDescendantsReturns = struct {
		result1 []*model.DirEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeDataHandle) ListDescendantsReturnsOnCall(i int, result1 []*model.DirEntry, result2 error) {
	fake.listDescendantsMutex.Lock()
	defer fake.listDescendantsMutex.Unlock()
	fake.ListDescendantsStub = nil
	if fake.listDescendantsReturnsOnCall == nil {
		fake.listDescendantsReturnsOnCall = make(map[int]struct {
			result1 []*model.DirEntry
			result2 error
		})
	}
	fake.listDescendantsReturnsOnCall[i] = struct {
		result1 []*model.DirEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeDataHandle) Ref() string {
	fake.refMutex.Lock()
	ret, specificReturn := fake.refReturnsOnCall[len(fake.refArgsForCall)]
	fake.refArgsForCall = append(fake.refArgsForCall, struct {
	}{})
	fake.recordInvocation("Ref", []interface{}{})
	fake.refMutex.Unlock()
	if fake.RefStub != nil {
		return fake.RefStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.refReturns
	return fakeReturns.result1
}

func (fake *FakeDataHandle) RefCallCount() int {
	fake.refMutex.RLock()
	defer fake.refMutex.RUnlock()
	return len(fake.refArgsForCall)
}

func (fake *FakeDataHandle) RefCalls(stub func() string) {
	fake.refMutex.Lock()
	defer fake.refMutex.Unlock()
	fake.RefStub = stub
}

func (fake *FakeDataHandle) RefReturns(result1 string) {
	fake.refMutex.Lock()
	defer fake.refMutex.Unlock()
	fake.RefStub = nil
	fake.refReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDataHandle) RefReturnsOnCall(i int, result1 string) {
	fake.refMutex.Lock()
	defer fake.refMutex.Unlock()
	fake.RefStub = nil
	if fake.refReturnsOnCall == nil {
		fake.refReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.refReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDataHandle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getContentMutex.RLock()
	defer fake.getContentMutex.RUnlock()
	fake.listDescendantsMutex.RLock()
	defer fake.listDescendantsMutex.RUnlock()
	fake.refMutex.RLock()
	defer fake.refMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDataHandle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ model.DataHandle = new(FakeDataHandle)
