"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[955],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(r),f=n,d=u["".concat(p,".").concat(f)]||u[f]||m[f]||i;return r?a.createElement(d,l(l({ref:t},s),{},{components:r})):a.createElement(d,l({ref:t},s))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9246:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var a=r(3117),n=r(102),i=(r(7294),r(3905)),l=["components"],o={title:"Array"},p=void 0,c={unversionedId:"reference/opspec/types/array",id:"reference/opspec/types/array",title:"Array",description:"Array typed values are a container for numerically indexed values (referred to as items).",source:"@site/docs/reference/opspec/types/array.md",sourceDirName:"reference/opspec/types",slug:"/reference/opspec/types/array",permalink:"/docs/reference/opspec/types/array",draft:!1,editUrl:"https://github.com/opctl/opctl/edit/main/website/docs/reference/opspec/types/array.md",tags:[],version:"current",lastUpdatedBy:"Chris Dostert",lastUpdatedAt:1605586799,formattedLastUpdatedAt:"Nov 17, 2020",frontMatter:{title:"Array"},sidebar:"docs",previous:{title:"Variable Reference [string]",permalink:"/docs/reference/opspec/op-directory/op/variable-reference"},next:{title:"Boolean",permalink:"/docs/reference/opspec/types/boolean"}},s={},m=[{value:"Initialization",id:"initialization",level:3},{value:"Initialization Example (literal)",id:"initialization-example-literal",level:4},{value:"Initialization Example (templated)",id:"initialization-example-templated",level:4},{value:"Item Referencing",id:"item-referencing",level:3},{value:"Item Referencing Example (first item)",id:"item-referencing-example-first-item",level:4},{value:"Item Referencing Example (last item)",id:"item-referencing-example-last-item",level:4},{value:"Coercion",id:"coercion",level:3}],u={toc:m};function f(e){var t=e.components,r=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Array typed values are a container for numerically indexed values (referred to as items)."),(0,i.kt)("p",null,"Arrays..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"are immutable, i.e. assigning to an array results in a copy of the original array"),(0,i.kt)("li",{parentName:"ul"},"can be passed in/out of ops via ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/opspec/op-directory/op/parameter/array"},"array parameters")),(0,i.kt)("li",{parentName:"ul"},"can be initialized via ",(0,i.kt)("a",{parentName:"li",href:"#initialization"},"array initialization")),(0,i.kt)("li",{parentName:"ul"},"items can be referenced via ",(0,i.kt)("a",{parentName:"li",href:"#item-referencing"},"array item referencing")),(0,i.kt)("li",{parentName:"ul"},"are coerced according to ",(0,i.kt)("a",{parentName:"li",href:"#coercion"},"array coercion"))),(0,i.kt)("h3",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"Array typed values can be constructed from a literal or templated array."),(0,i.kt)("p",null,"A templated array is an array which includes one or more ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/variable-reference"},"variable-reference [string]"),".\nAt runtime, each reference gets evaluated and replaced with it's corresponding value. "),(0,i.kt)("h4",{id:"initialization-example-literal"},"Initialization Example (literal)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- item1\n- item2\n")),(0,i.kt)("h4",{id:"initialization-example-templated"},"Initialization Example (templated)"),(0,i.kt)("p",null,"given:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"someDir/file2.txt")," is embedded in op"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"someObject")," ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"is in scope"),(0,i.kt)("li",{parentName:"ul"},"is type coercible to object"),(0,i.kt)("li",{parentName:"ul"},"has property ",(0,i.kt)("inlineCode",{parentName:"li"},"someProperty"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- string $(./someDir/file2.txt)\n- $(someObject.someProperty)\n- [ sub, array, 2]\n")),(0,i.kt)("h3",{id:"item-referencing"},"Item Referencing"),(0,i.kt)("p",null,"Array items can be referenced via ",(0,i.kt)("inlineCode",{parentName:"p"},"$(ARRAY[index])")," syntax, where ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," is the zero based index of the item.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," is negative, indexing will take place from the end of the array."),(0,i.kt)("h4",{id:"item-referencing-example-first-item"},"Item Referencing Example (first item)"),(0,i.kt)("p",null,"given:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"someArray",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"is in scope"),(0,i.kt)("li",{parentName:"ul"},"is type coercible to array"),(0,i.kt)("li",{parentName:"ul"},"has at least one item")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"$(someArray[0])\n")),(0,i.kt)("h4",{id:"item-referencing-example-last-item"},"Item Referencing Example (last item)"),(0,i.kt)("p",null,"given:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"someArray",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"is in scope"),(0,i.kt)("li",{parentName:"ul"},"is type coercible to array"),(0,i.kt)("li",{parentName:"ul"},"has at least one item")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"$(someArray[-1])\n")),(0,i.kt)("h3",{id:"coercion"},"Coercion"),(0,i.kt)("p",null,"Array typed values are coercible to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/opspec/types/boolean"},"boolean")," (arrays which are null or empty coerce to false; all else coerce to true)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/opspec/types/file"},"file")," (will be serialized to JSON)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/opspec/types/string"},"string")," (will be serialized to JSON)")))}f.isMDXComponent=!0}}]);