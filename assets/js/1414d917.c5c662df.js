"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[8689],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return f}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(r),f=a,m=d["".concat(c,".").concat(f)]||d[f]||s[f]||l;return r?t.createElement(m,o(o({ref:n},u),{},{components:r})):t.createElement(m,o({ref:n},u))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8950:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s}});var t=r(3117),a=r(102),l=(r(7294),r(3905)),o=["components"],i={title:"Serial and parallel execution"},c=void 0,p={unversionedId:"training/flow/serial-and-parallel-execution",id:"training/flow/serial-and-parallel-execution",title:"Serial and parallel execution",description:"TLDR;",source:"@site/docs/training/flow/serial-and-parallel-execution.md",sourceDirName:"training/flow",slug:"/training/flow/serial-and-parallel-execution",permalink:"/docs/training/flow/serial-and-parallel-execution",draft:!1,editUrl:"https://github.com/opctl/opctl/edit/main/website/docs/training/flow/serial-and-parallel-execution.md",tags:[],version:"current",lastUpdatedBy:"=",lastUpdatedAt:1682978842,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{title:"Serial and parallel execution"},sidebar:"docs",previous:{title:"Conditional execution",permalink:"/docs/training/flow/conditional-execution"},next:{title:"Serial and parallel looping",permalink:"/docs/training/flow/serial-and-parallel-looping"}},u={},s=[{value:"TLDR;",id:"tldr",level:2},{value:"Example",id:"example",level:2}],d={toc:s};function f(e){var n=e.components,r=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"tldr"},"TLDR;"),(0,l.kt)("p",null,"Opctl supports using ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/#serial"},"serial")," and/or ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/#parallel"},"parallel")," statements to make parts of your op run serially (one by one in order) or in parallel (all at once without order)."),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Start this op: ",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'name: serialAndParallelExecution\nrun:\n  serial:\n    - parallel:\n        - container:\n            cmd: [echo, "parallel[0]"]\n            image: { ref: alpine }\n        - container:\n            cmd: [echo, "parallel[1]"]\n            image: { ref: alpine }\n    - serial:\n        - container:\n            cmd: [echo, "serial[0]"]\n            image: { ref: alpine }\n        - container:\n            cmd: [echo, "serial[1]"]\n            image: { ref: alpine }\n'))),(0,l.kt)("li",{parentName:"ol"},"Observe:",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"for the ",(0,l.kt)("inlineCode",{parentName:"li"},"parallel")," statement, containers are run in parallel (all at once without order)"),(0,l.kt)("li",{parentName:"ol"},"for the ",(0,l.kt)("inlineCode",{parentName:"li"},"serial")," statement, containers are run serially (one by one in order)")))))}f.isMDXComponent=!0}}]);