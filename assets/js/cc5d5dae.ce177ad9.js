"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[2745],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(p,".").concat(m)]||u[m]||s[m]||i;return r?n.createElement(f,o(o({ref:t},d),{},{components:r})):n.createElement(f,o({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},887:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=["components"],l={sidebar_label:"Overview",title:"Container Call [object]"},p=void 0,c={unversionedId:"reference/opspec/op-directory/op/call/container/index",id:"reference/opspec/op-directory/op/call/container/index",title:"Container Call [object]",description:"An object defining a container call.",source:"@site/docs/reference/opspec/op-directory/op/call/container/index.md",sourceDirName:"reference/opspec/op-directory/op/call/container",slug:"/reference/opspec/op-directory/op/call/container/",permalink:"/docs/reference/opspec/op-directory/op/call/container/",draft:!1,editUrl:"https://github.com/opctl/opctl/edit/main/website/docs/reference/opspec/op-directory/op/call/container/index.md",tags:[],version:"current",lastUpdatedBy:"=",lastUpdatedAt:1685570826,formattedLastUpdatedAt:"May 31, 2023",frontMatter:{sidebar_label:"Overview",title:"Container Call [object]"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/reference/opspec/op-directory/op/call/"},next:{title:"Image [object]",permalink:"/docs/reference/opspec/op-directory/op/call/container/image"}},d={},s=[{value:"Properties",id:"properties",level:2},{value:"image",id:"image",level:3},{value:"cmd",id:"cmd",level:3},{value:"dirs",id:"dirs",level:3},{value:"envVars",id:"envvars",level:3},{value:"files",id:"files",level:3},{value:"name",id:"name",level:3},{value:"ports",id:"ports",level:3},{value:"sockets",id:"sockets",level:3},{value:"workDir",id:"workdir",level:3}],u={toc:s};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An object defining a container call."),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"must have",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#image"},"image")))),(0,i.kt)("li",{parentName:"ul"},"may have",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cmd"},"cmd")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#dirs"},"dirs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#envvars"},"envVars")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#files"},"files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#name"},"name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#ports"},"ports")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sockets"},"sockets")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#workdir"},"workDir"))))),(0,i.kt)("h3",{id:"image"},"image"),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/container/image"},"image [object]")," defining the container image run by the call."),(0,i.kt)("h3",{id:"cmd"},"cmd"),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/types/array"},"array")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/types/array#initialization"},"initializer")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/variable-reference"},"variable-reference [string]")," defining the path (from ",(0,i.kt)("a",{parentName:"p",href:"#workdir"},"workDir"),") of the binary to call and it's arguments."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"defining cmd overrides any entrypoint and/or cmd defined by the image")),(0,i.kt)("h3",{id:"dirs"},"dirs"),(0,i.kt)("p",null,"An object for which each key is an absolute path in the container and each value is one of:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"value"),(0,i.kt)("th",{parentName:"tr",align:null},"meaning"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"null"),(0,i.kt)("td",{parentName:"tr",align:null},"Mount dir embedded in op w/ same path (equivalent to ",(0,i.kt)("inlineCode",{parentName:"td"},"$(./relative/path)"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/reference/opspec/types/dir"},"dir")," ",(0,i.kt)("a",{parentName:"td",href:"/docs/reference/opspec/op-directory/op/variable-reference"},"variable-reference [string]")),(0,i.kt)("td",{parentName:"tr",align:null},"Mount dir")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/reference/opspec/types/dir#initialization"},"dir initializer")),(0,i.kt)("td",{parentName:"tr",align:null},"Evaluate and mount")))),(0,i.kt)("h3",{id:"envvars"},"envVars"),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/types/object#initialization"},"object initializer")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/variable-reference"},"variable-reference [string]"),", whos properties represent the name and value of an environment variable to be set in the container."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"upon evaluation, the key and value of each property will be coerced to a string.")),(0,i.kt)("h3",{id:"files"},"files"),(0,i.kt)("p",null,"An object for which each key is an absolute path in the container and each value is one of:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"value"),(0,i.kt)("th",{parentName:"tr",align:null},"meaning"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"null"),(0,i.kt)("td",{parentName:"tr",align:null},"Mount file embedded in op w/ same path (equivalent to ",(0,i.kt)("inlineCode",{parentName:"td"},"$(./relative/path)"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/reference/opspec/types/file"},"file")," ",(0,i.kt)("a",{parentName:"td",href:"/docs/reference/opspec/op-directory/op/variable-reference"},"variable-reference [string]")),(0,i.kt)("td",{parentName:"tr",align:null},"Mount file")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/reference/opspec/types/file#initialization"},"file initializer")),(0,i.kt)("td",{parentName:"tr",align:null},"Evaluate and mount")))),(0,i.kt)("h3",{id:"name"},"name"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/types/string#initialization"},"string initializer")," defining a name by which the container can be resolved on the opctl network."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"if multiple containers are given the same name, network requests will be distributed (load balanced) across them. ")),(0,i.kt)("h3",{id:"ports"},"ports"),(0,i.kt)("p",null,"An object defining container ports exposed on the opctl host where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"each key is a container port or range of ports (optionally including protocol) matching ",(0,i.kt)("inlineCode",{parentName:"li"},"[0-9]+(-[0-9]+)?(tcp|udp)")),(0,i.kt)("li",{parentName:"ul"},"each value is a corresponding opctl host port or range of ports matching ",(0,i.kt)("inlineCode",{parentName:"li"},"[0-9]+(-[0-9]+)?"))),(0,i.kt)("h3",{id:"sockets"},"sockets"),(0,i.kt)("p",null,"An object for which each key is an absolute path in the container and and each value is a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/types/socket"},"socket")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/variable-reference"},"variable-reference [string]")," to mount. "),(0,i.kt)("h3",{id:"workdir"},"workDir"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/types/string#initialization"},"string initializer")," defining absolute path from which ",(0,i.kt)("a",{parentName:"p",href:"#cmd"},"cmd")," will be executed."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"defining workDir overrides any defined by the image")))}m.isMDXComponent=!0}}]);