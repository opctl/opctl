"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[378],{9477:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"training/hello-world","title":"Hello World","description":"Let\'s create a simple op to run the essential programming task of greeting the world","source":"@site/docs/training/hello-world.md","sourceDirName":"training","slug":"/training/hello-world","permalink":"/docs/training/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/opctl/opctl/edit/main/website/docs/training/hello-world.md","tags":[],"version":"current","lastUpdatedBy":"Chris Dostert","lastUpdatedAt":1587672399000,"frontMatter":{"title":"Hello World"},"sidebar":"docs","previous":{"title":"Serial and parallel looping","permalink":"/docs/training/flow/serial-and-parallel-looping"},"next":{"title":"Inputs & Outputs","permalink":"/docs/training/inputs-outputs"}}');var l=o(4848),r=o(8453);const i={title:"Hello World"},s=void 0,a={},c=[];function d(e){const n={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:"Let's create a simple op to run the essential programming task of greeting the world"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Create a directory named ",(0,l.jsx)(n.code,{children:"hello-world"})]}),"\n",(0,l.jsxs)(n.li,{children:["Inside ",(0,l.jsx)(n.code,{children:"hello-world"})," create a file named ",(0,l.jsx)(n.code,{children:"op.yml"})," with the below contents"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'# you might want to match the name to the containing directory\'s\nname: hello-world\n\n# describe what your op does using markdown\ndescription: echoes hello world, because we gotta start somewhere\n\nrun:\n\n  # run a container\n  container:\n\n    # use image resolvable via reference alpine:3.6\n    image: { ref: \'alpine:3.6\' }\n\n    # invoke echo w/ arg "hello world"\n    cmd: [ echo, "hello world" ]\n'})}),"\n",(0,l.jsxs)(n.ol,{start:"3",children:["\n",(0,l.jsx)(n.li,{children:"verify you're in the right directory by running:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"ls\n"})}),"\n",(0,l.jsxs)(n.p,{children:["you should see ",(0,l.jsx)(n.code,{children:"hello-world"})]}),"\n",(0,l.jsxs)(n.ol,{start:"4",children:["\n",(0,l.jsx)(n.li,{children:"run your hello-world op:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ opctl run hello-world\n"})}),"\n",(0,l.jsxs)(n.p,{children:['You will see the running log of the op, and the glorious "hello world" echoed right before the ',(0,l.jsx)(n.code,{children:"ContainerExited"})," line"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var t=o(6540);const l={},r=t.createContext(l);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);