"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[2698],{3905:function(e,r,t){t.d(r,{Zo:function(){return f},kt:function(){return d}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},f=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),u=l(t),d=o,m=u["".concat(p,".").concat(d)]||u[d]||s[d]||a;return t?n.createElement(m,i(i({ref:r},f),{},{components:t})):n.createElement(m,i({ref:r},f))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7937:function(e,r,t){t.r(r),t.d(r,{assets:function(){return f},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s}});var n=t(3117),o=t(102),a=(t(7294),t(3905)),i=["components"],c={title:"Variable Reference [string]"},p=void 0,l={unversionedId:"reference/opspec/op-directory/op/variable-reference",id:"reference/opspec/op-directory/op/variable-reference",title:"Variable Reference [string]",description:"A string referencing the location of/for a value in the form of $(REFERENCE) where REFERENCE MUST start with an identifier [string] and MAY end with one or more:",source:"@site/docs/reference/opspec/op-directory/op/variable-reference.md",sourceDirName:"reference/opspec/op-directory/op",slug:"/reference/opspec/op-directory/op/variable-reference",permalink:"/docs/reference/opspec/op-directory/op/variable-reference",draft:!1,editUrl:"https://github.com/opctl/opctl/edit/main/website/docs/reference/opspec/op-directory/op/variable-reference.md",tags:[],version:"current",lastUpdatedBy:"Chris Dostert",lastUpdatedAt:1605586799,formattedLastUpdatedAt:"Nov 17, 2020",frontMatter:{title:"Variable Reference [string]"},sidebar:"docs",previous:{title:"String Parameter [object]",permalink:"/docs/reference/opspec/op-directory/op/parameter/string"},next:{title:"Array",permalink:"/docs/reference/opspec/types/array"}},f={},s=[],u={toc:s};function d(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A string referencing the location of/for a value in the form of ",(0,a.kt)("inlineCode",{parentName:"p"},"$(REFERENCE)")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"REFERENCE")," MUST start with an ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/identifier"},"identifier [string]")," and MAY end with one or more:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/opspec/types/array#item-referencing"},"array item references")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/opspec/types/object#property-referencing"},"object property references")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/opspec/types/dir#entry-referencing"},"dir entry references"))),(0,a.kt)("p",null,"References can be used to either define or access values in the current scope. "),(0,a.kt)("p",null,"When an op starts, it's initial scope includes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./")," equal to the current op directory i.e. the current ",(0,a.kt)("inlineCode",{parentName:"li"},"op.yml")," can be accessed via ",(0,a.kt)("inlineCode",{parentName:"li"},"$(./op.yml)"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"../")," equal to the parent of the current op directory i.e. the current ",(0,a.kt)("inlineCode",{parentName:"li"},"op.yml")," can be accessed via ",(0,a.kt)("inlineCode",{parentName:"li"},"$(../op.yml)"),"."),(0,a.kt)("li",{parentName:"ul"},"any defined inputs")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"note: variable references can be escaped by prefixing the ","[would be]"," variable reference with ",(0,a.kt)("inlineCode",{parentName:"p"},"\\")," i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"\\\\$(wouldBeVariableReference)")," would not be treated as a variable reference.")))}d.isMDXComponent=!0}}]);