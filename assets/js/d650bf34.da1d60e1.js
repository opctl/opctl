"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[6911],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=i(n),f=l,m=d["".concat(p,".").concat(f)]||d[f]||s[f]||a;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:l,o[1]=c;for(var i=2;i<a;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5634:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return s}});var r=n(3117),l=n(102),a=(n(7294),n(3905)),o=["components"],c={sidebar_label:"self-update",title:"opctl self-update"},p=void 0,i={unversionedId:"reference/cli/self-update",id:"reference/cli/self-update",title:"opctl self-update",description:"Update opctl.",source:"@site/docs/reference/cli/self-update.md",sourceDirName:"reference/cli",slug:"/reference/cli/self-update",permalink:"/docs/reference/cli/self-update",draft:!1,editUrl:"https://github.com/opctl/opctl/edit/main/website/docs/reference/cli/self-update.md",tags:[],version:"current",lastUpdatedBy:"Chris Dostert",lastUpdatedAt:1604531186,formattedLastUpdatedAt:"Nov 4, 2020",frontMatter:{sidebar_label:"self-update",title:"opctl self-update"},sidebar:"docs",previous:{title:"run",permalink:"/docs/reference/cli/run"},next:{title:"ui",permalink:"/docs/reference/cli/ui"}},u={},s=[{value:"Options",id:"options",level:2},{value:"<code>-c</code> or <code>--channel</code> <em>default: <code>stable</code></em>",id:"-c-or---channel-default-stable",level:3},{value:"Global Options",id:"global-options",level:2},{value:"Examples",id:"examples",level:2}],d={toc:s};function f(e){var t=e.components,n=(0,l.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"opctl self-update [OPTIONS]\n")),(0,a.kt)("p",null,"Update opctl."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"if a node is running, it will be automatically killed")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("h3",{id:"-c-or---channel-default-stable"},(0,a.kt)("inlineCode",{parentName:"h3"},"-c")," or ",(0,a.kt)("inlineCode",{parentName:"h3"},"--channel")," ",(0,a.kt)("em",{parentName:"h3"},"default: ",(0,a.kt)("inlineCode",{parentName:"em"},"stable"))),(0,a.kt)("p",null,"The release channel to update from"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"beta")," (smoke tested alpha channel)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"alpha")," (all bets are off)")),(0,a.kt)("h2",{id:"global-options"},"Global Options"),(0,a.kt)("p",null,"see ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/cli/global-options"},"global options")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"get latest stable release"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"opctl self-update\n# output: Updated to new version: 0.1.24!\n")),(0,a.kt)("p",null,"play around w/ latest beta release"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"opctl self-update -c beta\n# output: Updated to new version: 0.1.24-beta.1!\n")),(0,a.kt)("p",null,"play times over; switch back to latest stable release"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"opctl self-update\n# output: Updated to new version: 0.1.24!\n")))}f.isMDXComponent=!0}}]);