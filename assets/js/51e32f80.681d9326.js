"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[6514],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8685:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),l=["components"],o={title:"Dir"},p=void 0,c={unversionedId:"reference/opspec/types/dir",id:"reference/opspec/types/dir",title:"Dir",description:"Dir typed values are a filesystem directory entry.",source:"@site/docs/reference/opspec/types/dir.md",sourceDirName:"reference/opspec/types",slug:"/reference/opspec/types/dir",permalink:"/docs/reference/opspec/types/dir",draft:!1,editUrl:"https://github.com/opctl/opctl/edit/main/website/docs/reference/opspec/types/dir.md",tags:[],version:"current",lastUpdatedBy:"Chris Dostert",lastUpdatedAt:1605586799,formattedLastUpdatedAt:"Nov 17, 2020",frontMatter:{title:"Dir"},sidebar:"docs",previous:{title:"Boolean",permalink:"/docs/reference/opspec/types/boolean"},next:{title:"File",permalink:"/docs/reference/opspec/types/file"}},s={},u=[{value:"Initialization",id:"initialization",level:3},{value:"Initialization Example (literal)",id:"initialization-example-literal",level:4},{value:"Initialization Example (templated)",id:"initialization-example-templated",level:4},{value:"Entry Referencing",id:"entry-referencing",level:3},{value:"Entry Referencing Example (embedded)",id:"entry-referencing-example-embedded",level:4},{value:"Entry Referencing Example (scope)",id:"entry-referencing-example-scope",level:4}],d={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Dir typed values are a filesystem directory entry."),(0,a.kt)("p",null,"Dirs..."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"are mutable, i.e. making changes to a directory results in the directory being changed everywhere it's referenced."),(0,a.kt)("li",{parentName:"ul"},"can be passed in/out of ops via ",(0,a.kt)("a",{parentName:"li",href:"/docs/reference/opspec/op-directory/op/parameter/dir"},"dir parameters"),"."),(0,a.kt)("li",{parentName:"ul"},"can be initialized via ",(0,a.kt)("a",{parentName:"li",href:"#initialization"},"dir initialization")),(0,a.kt)("li",{parentName:"ul"},"are not coercible to any other type.")),(0,a.kt)("h3",{id:"initialization"},"Initialization"),(0,a.kt)("p",null,"Dir typed values can be constructed from a literal or templated object."),(0,a.kt)("p",null,"A templated object is an object which includes one or more ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/variable-reference"},"variable-reference [string]"),".\nAt runtime, each reference gets evaluated and replaced with it's corresponding value."),(0,a.kt)("h4",{id:"initialization-example-literal"},"Initialization Example (literal)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"myLiteralDir:\n    /singleLineFile:\n      data: contents of /childFile1\n    /subDir:\n      /multilineFile:\n        data: |\n          multiline\n          contents of /childFile2\n    /emptySubDir: {}\n")),(0,a.kt)("h4",{id:"initialization-example-templated"},"Initialization Example (templated)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"myTemplatedDir:\n    /childFile:\n      data: $(someVariable)\n")),(0,a.kt)("h3",{id:"entry-referencing"},"Entry Referencing"),(0,a.kt)("p",null,"Dir entries (child files/directories) can be referenced via ",(0,a.kt)("inlineCode",{parentName:"p"},"$(ROOT/ENTRY)")," syntax."),(0,a.kt)("h4",{id:"entry-referencing-example-embedded"},"Entry Referencing Example (embedded)"),(0,a.kt)("p",null,"given:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"file1.json")," exists in op")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"$(./file1.json)\n")),(0,a.kt)("h4",{id:"entry-referencing-example-scope"},"Entry Referencing Example (scope)"),(0,a.kt)("p",null,"given:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"someDir"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"is in scope dir"),(0,a.kt)("li",{parentName:"ul"},"contains ",(0,a.kt)("inlineCode",{parentName:"li"},"file2.txt"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"$(someDir/file2.txt)\n")))}m.isMDXComponent=!0}}]);