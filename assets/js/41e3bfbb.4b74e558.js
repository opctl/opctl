"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[4190],{4540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"training/inputs-outputs","title":"Inputs & Outputs","description":"Inputs","source":"@site/docs/training/inputs-outputs.md","sourceDirName":"training","slug":"/training/inputs-outputs","permalink":"/docs/training/inputs-outputs","draft":false,"unlisted":false,"editUrl":"https://github.com/opctl/opctl/edit/main/website/docs/training/inputs-outputs.md","tags":[],"version":"current","lastUpdatedBy":"Chris Dostert","lastUpdatedAt":1730760746000,"frontMatter":{"title":"Inputs & Outputs"},"sidebar":"docs","previous":{"title":"Hello World","permalink":"/docs/training/hello-world"},"next":{"title":"Visualize an op","permalink":"/docs/training/ui/Visualize-an-op"}}');var s=t(4848),i=t(8453);const r={title:"Inputs & Outputs"},l=void 0,a={},c=[{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"inputs",children:"Inputs"}),"\n",(0,s.jsx)(n.p,{children:"Let's modify the previous simple op to take an input and use it"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'name: hello-world\n\ndescription: echoes hello followed by a name you provide\n\n# we add the inputs section\ninputs:\n  person: # the name of this input is "person"\n    description: who to greet # the description is "who to greet"\n    string: # the type of this input is string\n      constraints: { minLength: 1 } # it can have a minLength of 1\n\nrun:\n\n  container:\n\n    image: { ref: \'alpine:3.6\' }\n    envVars: { person: $(person) } # we dereference our input "person" and assign its value to an environment variable called "person" inside the container\n    # invoke echo w/ arg "hello $person" - shell will substitute $person with the value of environment variable "person"\n    cmd:\n      - sh\n      - -ce\n      - echo hello $person\n'})}),"\n",(0,s.jsx)(n.p,{children:"if you run that, you'll be prompted for the input"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ opctl run hello-world\n\n-\n  Please provide "person".\n  Description: who to greet\n-\n\n'})}),"\n",(0,s.jsx)(n.p,{children:'if you type in "you", the container will run and echo out "hello you"'}),"\n",(0,s.jsx)(n.p,{children:"Now you may not want to be prompted for the input everytime you run the op. That's why there's several ways to accept input:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-a"})," cli flag: explicitly pass args to op. eg: ",(0,s.jsx)(n.code,{children:"-a NAME1=VALUE1 -a NAME2=VALUE2"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--arg-file"})," cli flag: reads in a file of args as key=value, in yml format. eg: ",(0,s.jsx)(n.code,{children:'--arg-file="./args.yml"'}),". This flag has a default value of ",(0,s.jsx)(n.code,{children:".opspec/args.yml"})," i.e. opctl will automatically check for an args file at ",(0,s.jsx)(n.code,{children:".opspec/args.yml"})]}),"\n",(0,s.jsx)(n.li,{children:"Environment variables: If you define an environment variable with the same name as an input on the machine you're running opctl on, its value will be supplied as the input's value"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default"})," property: You can define a ",(0,s.jsx)(n.code,{children:"default"})," property for each input, containing a value to assign if no other input method was invoked (cli args or args file)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Input sources are checked according to the following precedence:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"arg provided via -a option"}),"\n",(0,s.jsx)(n.li,{children:"arg file (since v0.1.19)"}),"\n",(0,s.jsx)(n.li,{children:"env var"}),"\n",(0,s.jsx)(n.li,{children:"default"}),"\n",(0,s.jsx)(n.li,{children:"prompt"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"outputs",children:"Outputs"}),"\n",(0,s.jsx)(n.p,{children:"Let's take that simple op with 1 input and have it provide an output to be used by another op"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"name: hello-world\n\ndescription: echoes hello followed by a name you provide\n\ninputs:\n  person:\n    description: whom to greet\n    string:\n      constraints: { minLength: 1 }\n\n# we add the outputs section\noutputs:\n  helloperson:\n    description: a string of hello $(person)\n    string: {}\n\nrun:\n  container:\n    files:\n        /output.txt: $(helloperson) # we bind our output to a file that we will create during the container run\n    image: { ref: 'alpine:3.6' }\n    envVars: { person: $(person) } \n    cmd:\n      - sh\n      - -ce\n      - |\n        echo hello $person > /output.txt\n"})}),"\n",(0,s.jsx)(n.p,{children:"We are now producing an output, let's reference it in another op:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a new directory and call it ",(0,s.jsx)(n.code,{children:"caddy"})]}),"\n",(0,s.jsxs)(n.li,{children:["create ",(0,s.jsx)(n.code,{children:"op.yml"})," in the ",(0,s.jsx)(n.code,{children:"caddy"})," directory, with the below contents"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"name: caddy\n\ndescription: runs a simple caddy web server that serves a welcome text at http://inputs-outputs:2015\n\ninputs:\n# we need an input of person to pass to the hello-world op when we run it as part of the caddy op\n  person:\n    description: name to greet with welcome text at root of web site\n    string:\n      constraints: { minLength: 1 }\nrun:\n  serial:\n    - op:\n        ref: $(../hello-world) # here we reference the other op we wrote, hello-world\n        inputs: { person } # we pass our input, person, as input to hello-world\n        outputs: { helloperson } # we add hello-world's output (helloperson) to the scope of this op\n    - container:\n        files:\n            /srv/index.html: $(helloperson) # we dereference helloperson and use its value to populate an index.html file at the default root directory of the caddy image\n        image: { ref: 'abiosoft/caddy' }\n        name: inputs-outputs\n"})}),"\n",(0,s.jsx)(n.p,{children:"and run it"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ opctl run -a person=you caddy\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now if you navigate to ",(0,s.jsx)(n.a,{href:"http://inputs-outputs:2015",children:"http://inputs-outputs:2015"}),' in your browser or via curl, you should see the text "hello you"\nAs you make requests to that web server, you should see caddy\'s log in your terminal']}),"\n",(0,s.jsxs)(n.p,{children:["The above is an example of how ops can reference other ops, and how they can be composed. Note also how we effortlessly and implicitly coerced ",(0,s.jsx)(n.code,{children:"helloperson"}),"'s value from a ",(0,s.jsx)(n.code,{children:"string"})," into a ",(0,s.jsx)(n.code,{children:"file"})," as we mounted ",(0,s.jsx)(n.code,{children:"/srv/index.html"})," in the container"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);