"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[339],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=r.createContext({}),p=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=p(t.components);return r.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,l=t.parentName,s=c(t,["components","mdxType","originalType","parentName"]),f=p(n),d=o,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(m,a(a({ref:e},s),{},{components:n})):r.createElement(m,a({ref:e},s))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:o,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2185:function(t,e,n){n.r(e),n.d(e,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],c={title:"Host to container networking"},l=void 0,p={unversionedId:"training/containers/host-to-container-networking",id:"training/containers/host-to-container-networking",title:"Host to container networking",description:"TLDR;",source:"@site/docs/training/containers/host-to-container-networking.md",sourceDirName:"training/containers",slug:"/training/containers/host-to-container-networking",permalink:"/docs/training/containers/host-to-container-networking",draft:!1,editUrl:"https://github.com/opctl/opctl/edit/main/website/docs/training/containers/host-to-container-networking.md",tags:[],version:"current",lastUpdatedBy:"=",lastUpdatedAt:1682978842,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{title:"Host to container networking"},sidebar:"docs",previous:{title:"Container to container networking",permalink:"/docs/training/containers/container-to-container-networking"},next:{title:"Conditional execution",permalink:"/docs/training/flow/conditional-execution"}},s={},u=[{value:"TLDR;",id:"tldr",level:2},{value:"Example",id:"example",level:2}],f={toc:u};function d(t){var e=t.components,n=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"tldr"},"TLDR;"),(0,i.kt)("p",null,"Opctl supports using ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/container/#ports"},"ports")," statements to bind opctl container ports to opctl node host ports."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Start this op: ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: curl\nrun:\n  container:\n    image: { ref: nginx:alpine }\n    ports:\n      # bind container port 80 to host port 8080\n      80: 8080\n"))),(0,i.kt)("li",{parentName:"ol"},"On the opctl host, open a web browser to ",(0,i.kt)("a",{parentName:"li",href:"localhost:8080"},"localhost:8080"),"."),(0,i.kt)("li",{parentName:"ol"},"Observe the nginx containers default page is returned.")))}d.isMDXComponent=!0}}]);