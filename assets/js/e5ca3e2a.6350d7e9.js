"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[2914],{7456:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"reference/cli/run","title":"run","description":"opctl run","source":"@site/docs/reference/cli/run.md","sourceDirName":"reference/cli","slug":"/reference/cli/run","permalink":"/docs/reference/cli/run","draft":false,"unlisted":false,"editUrl":"https://github.com/opctl/opctl/edit/main/website/docs/reference/cli/run.md","tags":[],"version":"current","lastUpdatedBy":"Chris Dostert","lastUpdatedAt":1744401580000,"frontMatter":{"sidebar_label":"run","hide_title":true},"sidebar":"docs","previous":{"title":"validate","permalink":"/docs/reference/cli/op/validate"},"next":{"title":"self-update","permalink":"/docs/reference/cli/self-update"}}');var r=t(4848),o=t(8453);const l={sidebar_label:"run",hide_title:!0},s=void 0,a={},c=[{value:"opctl run",id:"opctl-run",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Examples",id:"examples",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"opctl-run",children:"opctl run"}),"\n",(0,r.jsx)(n.p,{children:"Run an op"}),"\n",(0,r.jsx)(n.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(n.p,{children:"OP_REF can be either a 'relative/path', '/absolute/path', 'host/path/repo#tag', or 'host/path/repo#tag/path'."}),"\n",(0,r.jsx)(n.p,{children:"If an opctl node isn't reachable, one will be started automatically."}),"\n",(0,r.jsx)(n.p,{children:"If auth w/ the op source fails the CLI will (re)prompt for username &\npassword. In non-interactive terminals, the CLI will note that it can't prompt due to being in a\nnon-interactive terminal and exit with a non zero exit code."}),"\n",(0,r.jsx)(n.p,{children:"Op input args are obtained from the following sources in order:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"arg provided via -a option"}),"\n",(0,r.jsx)(n.li,{children:"arg file"}),"\n",(0,r.jsx)(n.li,{children:"env var"}),"\n",(0,r.jsx)(n.li,{children:"default"}),"\n",(0,r.jsx)(n.li,{children:"prompt"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If valid input args cannot be obtained, the CLI will prompt for them. In non-interactive terminals,\nthe CLI will provide details about the invalid or missing input, note that it's giving up due\nto being in a non-interactive terminal and exit with a non zero exit code."}),"\n",(0,r.jsx)(n.p,{children:"If provided args don't meet input constraints, the CLI will (re)prompt until a valid arg is obtained."}),"\n",(0,r.jsx)(n.p,{children:"All ops &/or images pulled will be cached."}),"\n",(0,r.jsx)(n.p,{children:"Pulling any updates to referenced images will be attempted prior to container creation. If pulling\nan updated image fails, graceful fallback to the cached image will occur."}),"\n",(0,r.jsx)(n.p,{children:"All containers created by opctl will be attached to an overlay network and made accessible from the\nopctl node and other opctl containers by their name. Containers will be removed as they exit."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"opctl run OP_REF [flags]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# Run the op defined in the '.opspec/myOp' directory of the current working directory.\nopctl run myOp\n\n# Run the op defined in the root directory of the 'github.com/opspec-pkgs/slack.chat.post-message' git \n# repository commit tagged '1.1.0'. Pass arguments for 'apiToken', 'channelName', and 'msg' inputs.\nopctl run -a apiToken=\"my-token\" -a channelName=\"my-channel\" -a msg=\"hello!\" github.com/opspec-pkgs/slack.chat.post-message#1.1.0\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'      --arg-file string    Read in a file of args in yml format (env $OPCTL_RUN_ARG_FILE) (default ".opspec/args.yml")\n  -a, --args stringArray   Explicitly pass args to the op (env $OPCTL_RUN_ARGS)\n  -h, --help               help for run\n      --no-progress        Disable live call graph for the op (env $OPCTL_RUN_NO_PROGRESS)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'      --api-listen-address string   IP:PORT on which the API server will listen (env $OPCTL_API_LISTEN_ADDRESS) (default "127.0.0.1:42224")\n      --container-runtime string    Runtime for opctl containers. Can be \'docker\' (deprecated), \'k8s\', or \'embedded\' (env $OPCTL_CONTAINER_RUNTIME) (default "docker")\n      --data-dir string             Path of dir used to store opctl data (env $OPCTL_DATA_DIR) (default "/root/opctl")\n      --dns-listen-address string   IP:PORT on which the DNS server will listen (env $OPCTL_DNS_LISTEN_ADDRESS) (default "127.0.0.1:53")\n      --no-color                    Disable output coloring (env $OPCTL_NO_COLOR)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/reference/cli/",children:"opctl"}),"\t - Opctl is a free and open source distributed operation control system"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);