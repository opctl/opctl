"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[2514],{2368:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"training/flow/serial-and-parallel-execution","title":"Serial and parallel execution","description":"TLDR;","source":"@site/docs/training/flow/serial-and-parallel-execution.md","sourceDirName":"training/flow","slug":"/training/flow/serial-and-parallel-execution","permalink":"/docs/training/flow/serial-and-parallel-execution","draft":false,"unlisted":false,"editUrl":"https://github.com/opctl/opctl/edit/main/website/docs/training/flow/serial-and-parallel-execution.md","tags":[],"version":"current","lastUpdatedBy":"=","lastUpdatedAt":1682978842000,"frontMatter":{"title":"Serial and parallel execution"},"sidebar":"docs","previous":{"title":"Conditional execution","permalink":"/docs/training/flow/conditional-execution"},"next":{"title":"Serial and parallel looping","permalink":"/docs/training/flow/serial-and-parallel-looping"}}');var r=l(4848),t=l(8453);const i={title:"Serial and parallel execution"},o=void 0,s={},c=[{value:"TLDR;",id:"tldr",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"tldr",children:"TLDR;"}),"\n",(0,r.jsxs)(n.p,{children:["Opctl supports using ",(0,r.jsx)(n.a,{href:"/docs/reference/opspec/op-directory/op/call/#serial",children:"serial"})," and/or ",(0,r.jsx)(n.a,{href:"/docs/reference/opspec/op-directory/op/call/#parallel",children:"parallel"})," statements to make parts of your op run serially (one by one in order) or in parallel (all at once without order)."]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Start this op:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'name: serialAndParallelExecution\nrun:\n  serial:\n    - parallel:\n        - container:\n            cmd: [echo, "parallel[0]"]\n            image: { ref: alpine }\n        - container:\n            cmd: [echo, "parallel[1]"]\n            image: { ref: alpine }\n    - serial:\n        - container:\n            cmd: [echo, "serial[0]"]\n            image: { ref: alpine }\n        - container:\n            cmd: [echo, "serial[1]"]\n            image: { ref: alpine }\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Observe:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["for the ",(0,r.jsx)(n.code,{children:"parallel"})," statement, containers are run in parallel (all at once without order)"]}),"\n",(0,r.jsxs)(n.li,{children:["for the ",(0,r.jsx)(n.code,{children:"serial"})," statement, containers are run serially (one by one in order)"]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>o});var a=l(6540);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);