"use strict";(self.webpackChunkopctl=self.webpackChunkopctl||[]).push([[689],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return u}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),c=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},s=function(e){var r=c(e.components);return n.createElement(p.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),f=c(t),u=a,m=f["".concat(p,".").concat(u)]||f[u]||d[u]||l;return t?n.createElement(m,o(o({ref:r},s),{},{components:t})):n.createElement(m,o({ref:r},s))}));function u(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=f;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9011:function(e,r,t){t.r(r),t.d(r,{assets:function(){return s},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var n=t(3117),a=t(102),l=(t(7294),t(3905)),o=["components"],i={sidebar_label:"Overview",title:"Call [object]"},p=void 0,c={unversionedId:"reference/opspec/op-directory/op/call/index",id:"reference/opspec/op-directory/op/call/index",title:"Call [object]",description:"An object defining a call in an operations call graph.",source:"@site/docs/reference/opspec/op-directory/op/call/index.md",sourceDirName:"reference/opspec/op-directory/op/call",slug:"/reference/opspec/op-directory/op/call/",permalink:"/docs/reference/opspec/op-directory/op/call/",draft:!1,editUrl:"https://github.com/opctl/opctl/edit/main/website/docs/reference/opspec/op-directory/op/call/index.md",tags:[],version:"current",lastUpdatedBy:"=",lastUpdatedAt:1616514289,formattedLastUpdatedAt:"Mar 23, 2021",frontMatter:{sidebar_label:"Overview",title:"Call [object]"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/reference/opspec/op-directory/op/"},next:{title:"Overview",permalink:"/docs/reference/opspec/op-directory/op/call/container/"}},s={},d=[{value:"Properties",id:"properties",level:2},{value:"container",id:"container",level:3},{value:"description",id:"description",level:3},{value:"op",id:"op",level:3},{value:"parallel",id:"parallel",level:3},{value:"parallelLoop",id:"parallelloop",level:3},{value:"serial",id:"serial",level:3},{value:"serialLoop",id:"serialloop",level:3},{value:"if",id:"if",level:3},{value:"name",id:"name",level:3},{value:"needs",id:"needs",level:3},{value:"Example Needs (Integration Test)",id:"example-needs-integration-test",level:4}],f={toc:d};function u(e){var r=e.components,t=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"An object defining a call in an operations call graph."),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"must have exactly one of",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#container"},"container")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#op"},"op")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#parallel"},"parallel")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#parallelloop"},"parallelLoop")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#serial"},"serial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#serialloop"},"serialLoop")))),(0,l.kt)("li",{parentName:"ul"},"may have",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#description"},"description")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#if"},"if")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#name"},"name")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#needs"},"needs"))))),(0,l.kt)("h3",{id:"container"},"container"),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/container/"},"container-call [object]")," defining a container to run."),(0,l.kt)("h3",{id:"description"},"description"),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/markdown"},"markdown [string]")," defining a human friendly description of the call."),(0,l.kt)("h3",{id:"op"},"op"),(0,l.kt)("p",null,"An ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/op"},"op-call [object]")," defining an op to run."),(0,l.kt)("h3",{id:"parallel"},"parallel"),(0,l.kt)("p",null,"An array of ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/"},"call [object]"),"s defining calls run in parallel (all at once without order)."),(0,l.kt)("h3",{id:"parallelloop"},"parallelLoop"),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/parallel-loop"},"parallel-loop-call [object]")," defining a call loop in which all iterations happen in parallel (all at once without order)."),(0,l.kt)("h3",{id:"serial"},"serial"),(0,l.kt)("p",null,"An array of ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/"},"call [object]"),"s defining calls run in serial (one after another in order)."),(0,l.kt)("h3",{id:"serialloop"},"serialLoop"),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/serial-loop"},"serial-loop-call [object]")," defining a call loop in which each iteration happens in serial (one after another in order)"),(0,l.kt)("h3",{id:"if"},"if"),(0,l.kt)("p",null,"An array of ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/call/predicate"},"predicate [object]"),"s which must all be true for the call to take place."),(0,l.kt)("h3",{id:"name"},"name"),(0,l.kt)("p",null,"An ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/identifier"},"identifier [string]")," used to identify the call in UI's or ",(0,l.kt)("a",{parentName:"p",href:"#needs"},"needs")," of sibling calls."),(0,l.kt)("h3",{id:"needs"},"needs"),(0,l.kt)("p",null,"An array of ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/opspec/op-directory/op/identifier"},"identifier [string]"),"s identifying calls needed by the current call. When the named calls are no longer needed (by this or any other call), they will be killed."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"note: needed calls and the current call MUST be children of the same parallel block. If not, the need will be ignored.")),(0,l.kt)("h4",{id:"example-needs-integration-test"},"Example Needs (Integration Test)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"name: integration-test\ndescription: systemUnderTest will be shutdown after 1 second because it's no longer needed.\nrun:\n  parallel:\n    - name: systemUnderTest\n      container:\n        image: {ref: alpine}\n        cmd: [sleep, 100000]\n    - container:\n        image: {ref: alpine}\n        cmd: [sleep, 1]\n      needs:\n        - systemUnderTest\n")))}u.isMDXComponent=!0}}]);